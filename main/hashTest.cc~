#include <iostream>
#include <fstream>
#include <cstdlib>
#include <unistd.h>
#include <sys/time.h>
#include<vector>
#include"xxh64.hpp"

//struct to contains a single triple with int type.
struct tripleContainer {
        std::string subject;
        std::string predicate;
        std::string object;
};

unsigned long hashF(char *str)
{
    unsigned long hash = 5381;
    int c;

    while (c = *str++)
        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */

    return hash;
}



int separateWords(std::string inputString, std::vector<std::string> &wordVector,const char separator ) {	
	const size_t zeroIndex = 0;
	size_t splitIndex = inputString.find(separator);
	
	while (splitIndex != -1)
		{
			wordVector.push_back(inputString.substr(zeroIndex, splitIndex));	
			inputString = inputString.substr(splitIndex + 1 , inputString.length() - 1);
			splitIndex = inputString.find(separator);
		}
	
	wordVector.push_back(inputString);
	return 0;
}


int main(int argc, char** argv) {
 
		using namespace std;
		
		struct timeval begin, end;


                size_t BUFFER_SIZE = 400000;

		std::vector<float> timeCuVector;                
		std::vector<float> timeExVector;

		ifstream rdfStoreFile (argv[1]);
		string strInput;
		int fileLength = 0;	 
		while (std::getline(rdfStoreFile, strInput)) {
			++fileLength;
		}
	
		rdfStoreFile.clear();
		rdfStoreFile.seekg(0, ios::beg);

                size_t rdfSize = fileLength  * sizeof(tripleContainer);
                tripleContainer h_rdfStore[300000];

                //read store from rdfStore
                for (int i = 0; i <fileLength; i++) {
			getline(rdfStoreFile,strInput);
                        std::vector<string> triple;
                        separateWords(strInput, triple, ' ');
			
			
			h_rdfStore[i].subject = triple[0];
                        h_rdfStore[i].predicate =  triple[1];
                        h_rdfStore[i].object = triple[2];

                }

                rdfStoreFile.close();



		//DEVO HASHARE h_rdfStore;
		gettimeofday(&begin, NULL);	
	/*	for (int i = 0; i < fileLength; i++) {
			hashF(h_rdfStore[i].subject);
			hashF(h_rdfStore[i].predicate);
			hashF(h_rdfStore[i].object);
		}*/
		for (int i = 0; i <fileLength; i++) {
			uint64_t hash = xxh64::hash (h_rdfStore[i].subject.c_str(), h_rdfStore[i].subject.length()	, 0);
			hash = xxh64::hash (h_rdfStore[i].predicate.c_str(), h_rdfStore[i].predicate.length(), 0);
			hash = xxh64::hash (h_rdfStore[i].object.c_str(), h_rdfStore[i].object.length(), 0);
		}
		
		gettimeofday(&end, NULL);	
		
		
		float elapsed = 1000 * (end.tv_sec - begin.tv_sec) + (float) (end.tv_usec - begin.tv_usec) / (float) 1000;
		std::cout << "Elapsed time is " << elapsed  << std::endl;
		
		std::cout << "size is " << (sizeof(int) * 3 * 300000) << std::endl;
		
		
                return 0;
}
